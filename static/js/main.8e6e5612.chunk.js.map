{"version":3,"sources":["components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","name","placeholder","Weather","className","temperature","city","country","humidity","description","error","API_KEY","App","state","e","a","async","preventDefault","target","elements","value","fetch","api","json","data","console","log","setState","main","temp","sys","weather","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAaeA,EAXF,SAACC,GACN,OACI,0BAAMC,SAAUD,EAAME,YACf,2BAAOC,KAAM,OAAQC,KAAK,OAAOC,YAAY,YAC7C,2BAAOF,KAAM,OAAQC,KAAK,UAAUC,YAAY,eAChD,kDCuCJC,EA5CC,SAACN,GACb,OAEQ,yBAAKO,UAAU,QAEXP,EAAMQ,aACL,uBAAGD,UAAW,YAAd,gBACA,0BAAMA,UAAW,cAAjB,IAAiCP,EAAMQ,YAAvC,MAIAR,EAAMS,MACN,uBAAGF,UAAW,YAAd,UACA,0BAAMA,UAAW,cAAjB,IAAiCP,EAAMS,KAAvC,MAIDT,EAAMU,SACN,uBAAGH,UAAW,YAAd,aACA,0BAAMA,UAAW,cAAjB,IAAgCP,EAAMU,QAAtC,OAIAV,EAAMW,UACN,uBAAGJ,UAAW,YAAd,cACA,0BAAMA,UAAW,cAAjB,IAAgCP,EAAMW,SAAtC,MAIAX,EAAMY,aACN,uBAAGL,UAAW,YAAd,gBACA,0BAAMA,UAAW,cAAjB,IAAgCP,EAAMY,YAAtC,MAIAZ,EAAMa,OACN,uBAAGN,UAAW,YAAd,WACA,0BAAMA,UAAW,cAAjB,IAAgCP,EAAMa,MAAtC,SCjCVC,EAAU,mCAoEDC,E,2MA7DbC,MAAQ,CACNR,YAAY,GACZC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,I,EAKVX,WAAa,SAAOe,GAAP,qBAAAC,EAAAC,OAAA,uDACXF,EAAEG,iBACIX,EAAOQ,EAAEI,OAAOC,SAASb,KAAKc,MAC9Bb,EAAUO,EAAEI,OAAOC,SAASZ,QAAQa,MAH/B,WAAAL,EAAA,MAIQM,MAAM,oDAAD,OAAqDf,EAArD,YAA6DC,EAA7D,kBAA8EI,KAJ3F,cAIJW,EAJI,kBAAAP,EAAA,MAKSO,EAAIC,QALb,OAKJC,EALI,OAMXC,QAAQC,IAAIF,GACPlB,GAAQC,EAEV,EAAKoB,SAAS,CACdtB,YAAamB,EAAKI,KAAKC,KACvBvB,KAAMkB,EAAKvB,KACXM,QAASiB,EAAKM,IAAIvB,QAClBC,SAAUgB,EAAKI,KAAKpB,SACpBC,YAAae,EAAKO,QAAQ,GAAGtB,YAC7BC,MAAM,KAMP,EAAKiB,SAAS,CACZtB,YAAY,GACZC,KAAK,GACLC,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,sBA3BC,uC,wEAgCT,OACA,yBAAKN,UAAU,WACf,yBAAKA,UAAU,kBACf,kBAAC,EAAD,CAAML,WAAaiC,KAAKjC,aACxB,kBAAC,EAAD,CACEM,YAAc2B,KAAKnB,MAAMR,YACzBC,KAAQ0B,KAAKnB,MAAMP,KACnBC,QAAWyB,KAAKnB,MAAMN,QACtBC,SAAYwB,KAAKnB,MAAML,SACvBC,YAAeuB,KAAKnB,MAAMJ,YAC1BC,MAASsB,KAAKnB,MAAMH,c,GAvDRuB,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8e6e5612.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n        return (\r\n            <form onSubmit={props.getWeather}>\r\n                   <input type= \"text\"  name=\"city\" placeholder=\"City...\"/>\r\n                   <input type= \"text\"  name=\"country\" placeholder=\"Country...\"/>\r\n                   <button>Get Weather </button>\r\n            </form>\r\n        )\r\n    \r\n}\r\n \r\nexport default Form","import React  from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (\r\n\r\n            <div className=\"info\">\r\n            {\r\n                props.temperature &&\r\n                 <p className =\"info_key\">Tempreature :\r\n                 <span className =\"info_value\" > {props.temperature} </span> \r\n                 </p>\r\n            }\r\n            {\r\n                 props.city && \r\n                 <p className =\"info_key\"> City : \r\n                 <span className =\"info_value\" > {props.city} </span> \r\n                  </p>\r\n            }\r\n            {\r\n                props.country && \r\n                <p className =\"info_key\"> Country : \r\n                <span className =\"info_value\"> {props.country}  </span>\r\n                </p>\r\n            }\r\n            {\r\n                props.humidity && \r\n                <p className =\"info_key\"> Humidity : \r\n                <span className =\"info_value\"> {props.humidity} </span>\r\n                </p>\r\n            }\r\n            {\r\n                props.description && \r\n                <p className =\"info_key\">Description :\r\n                <span className =\"info_value\"> {props.description} </span>\r\n                </p>\r\n            }\r\n            {\r\n                props.error && \r\n                <p className =\"info_key\" > error : \r\n                <span className =\"info_value\"> {props.error}  </span>\r\n                 </p>\r\n            } \r\n             </div>\r\n    )\r\n    \r\n}\r\nexport default Weather","import React , {Component} from 'react';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\n\n\nconst API_KEY = \"e36ed364400282e43250b6c4c0274d44\"; \n\n//https://api.openweathermap.org/data/2.5/weather?q=cairo,egypt&appid=e36ed364400282e43250b6c4c0274d44;\n//https://samples.openweathermap.org/data/2.5/weather?q=cairo,egypt&appid=c4d8b1d8fc534cfdbad2f6e48f0b559f\n//https://samples.openweathermap.org/data/2.5/weather?q=London,uk&appid=b6907d289e10d714a6e88b30761fae22\nclass App extends Component {\n\n  state = { \n    temperature:'',\n    city:'',\n    country:'',\n    humidity:'',\n    description:'',\n    error:''\n  }\n\n  \n\ngetWeather = async (e) => {\n  e.preventDefault()\n  const city = e.target.elements.city.value;\n  const country = e.target.elements.country.value;\n  const  api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`);\n  const  data = await api.json();\n  console.log(data) \n    if(city && country)\n    {\n     this.setState({\n     temperature: data.main.temp,\n     city: data.name,\n     country: data.sys.country,\n     humidity: data.main.humidity,\n     description: data.weather[0].description,\n     error:''\n\n    })\n  }\n  else \n  {\n    this.setState({\n      temperature:'',\n      city:'',\n      country:'',\n      humidity:'',\n      description:'',\n      error:'please enter data'\n    })\n  }\n }\n  render(){\n    return (\n    <div className=\"wrapper\">\n    <div className=\"form-container\">\n    <Form getWeather ={this.getWeather}/>\n    <Weather\n      temperature ={this.state.temperature}\n      city = {this.state.city}\n      country = {this.state.country}\n      humidity = {this.state.humidity}\n      description = {this.state.description}\n      error = {this.state.error}\n    />\n    </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}